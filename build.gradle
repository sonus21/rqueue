plugins {
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'
}
allprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'jacoco'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        jcenter()
    }
}

subprojects {
    group = 'com.github.sonus21'
    version = '1.0-SNAPSHOT'

    dependencies {
        // https://mvnrepository.com/artifact/org.springframework/spring-messaging
        compile group: 'org.springframework', name: 'spring-messaging', version: '5.2.0.RELEASE'
        // https://mvnrepository.com/artifact/org.springframework.data/spring-data-redis
        compile group: 'org.springframework.data', name: 'spring-data-redis', version: '2.2.0.RELEASE'

        testCompile group: 'org.projectlombok', name: 'lombok', version: '1.18.10'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.10'

        // https://mvnrepository.com/artifact/ch.qos.logback/logback-core
        testCompile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
        // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
        testCompile group: 'junit', name: 'junit', version: '4.12'
        // https://mvnrepository.com/artifact/org.mockito/mockito-core
        testCompile group: 'org.mockito', name: 'mockito-core', version: '3.1.0'
        // https://mvnrepository.com/artifact/org.hamcrest/hamcrest-library
        testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '2.2'
        // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
        testCompile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
        // https://mvnrepository.com/artifact/org.springframework/spring-test
        testCompile group: 'org.springframework', name: 'spring-test', version: '5.2.0.RELEASE'
        testCompile('org.springframework.boot:spring-boot-test:2.2.0.RELEASE')
        configurations {
            all*.exclude module: 'spring-boot-starter-logging'
        }
    }
}

def publishedProjects = subprojects.findAll({ subproject ->
    subproject.pluginManager.hasPlugin('java') && !subproject.name.endsWith("example")
})

task jacocoMerge(type: JacocoMerge) {
    publishedProjects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}


task codeCoverageReport(type: JacocoReport, group: 'verification', description: 'Generate code coverage report') {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    publishedProjects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        csv.enabled false
        html.enabled true
    }
    test.useTestNG()
}


jacoco {
    toolVersion = "0.8.4"
}

codeCoverageReport.dependsOn {
    subprojects*.test
}

coveralls {
    description = 'Uploads the aggregated coverage report to Coveralls'
    sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
}
